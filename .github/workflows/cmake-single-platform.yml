# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml

name: CMake on a single platform

on:
  #push:
  #  branches: [ "latest" ]
  #pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:
    #nothing, idk

permissions:
  contents: write

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true  # Fetch submodules

    - name: Extract Version from CMakeLists.txt
      id: extract_version
      run: |
        VERSION=$(grep -oP 'project\([^\)]*VERSION\s+\K[^\)]+' CMakeLists.txt)
        echo "VERSION=$VERSION"
        echo "version=$VERSION" >> $GITHUB_ENV
      
    - name: Install dependencies
      run: sudo apt-get install libdeflate-dev liblua5.4-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Package
      run: |
        cpack --config ${{github.workspace}}/build/CPackConfig.cmake -G TGZ
        PACKAGE=$(ls ${{github.workspace}}/*.tar.gz)
        echo "PACKAGE=$PACKAGE"
        echo "package=$PACKAGE" >> $GITHUB_ENV


    - name: Create GitHub Release (Only Once)
      if: ${{ matrix.os == 'ubuntu-latest' }}  # Only first OS creates the release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.version }}
        release_name: v${{ env.version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.version }}
        files: ${{ env.package }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}